#!/usr/bin/env python3

import sys, datetime, json, re
from collections import defaultdict

iso8601_format = r'(\d+)-(\d+)-(\d+)T(\d+):(\d+):(\d+)(\.\d+)?(?:([-+])(\d\d):(\d\d))?$'

def parse_iso8601(formatted_time):
    match = re.match(iso8601_format, formatted_time)
    if match:
        if match.group(8) == '-':
            tz_sign = -1
        else:
            tz_sign = 1
        dt = datetime.datetime(
            int(match.group(1)),
            int(match.group(2)),
            int(match.group(3)),
            int(match.group(4)),
            int(match.group(5)),
            int(match.group(6)),
            int(float('0'+match.group(7))*1000000),
            datetime.timezone(offset=tz_sign * datetime.timedelta(
                hours=int(match.group(9)), minutes=int(match.group(10)))),
        )
        return dt
    else:
        raise ValueError('Time not in ISO8601 format: %s' % formatted_time)

def humanize_extended_json(doc):
    if isinstance(doc, dict):
        keys = ' '.join(sorted(doc.keys()))
        if keys == '$oid':
            return doc['$oid']
        else:
            return doc
    elif isinstance(doc, list):
        return map(humanize_extended_json, doc)
    else:
        return doc

for line in sys.stdin.readlines():
    line = humanize_extended_json(json.loads(line))
    if 't' in line and '$date' in line['t']:
        formatted_time = line['t']['$date']
        if True:
            line['t'] = formatted_time
        else:
            try:
                line['t'] = parse_iso8601(formatted_time)
            except ValueError:
                pass
    #print(line)
    if 'attr' in line:
        #print(line)
        #print(line['msg'],line['attr'])
        vars = dict(**line['attr'])
        for key in re.findall(r'\{(\w+?)\}', line['msg']):
            if key not in vars:
                sys.stderr.write("ERROR: missing value for %s:\n%s\nwith %s\n" % (key, line['msg'], line['attr']))
                vars[key] = '???'
        
        #print(vars['delay'])
        formatted_msg = line['msg'].format(**vars)
    else:
        formatted_msg = line['msg']
    print('%s %s %s [%s] %s' % (
        #line['t'].strftime(iso8601_format),
        line['t'],
        line['s'],
        line['c'],
        line['ctx'],
        formatted_msg,
    ))
